void PlotSingleChannelPulseAnalysis(const char* root_file, int chNo) {
  gROOT->Reset();
  // declare tree variables
  Int_t EvtNum, AddNum,  WrAddNum;
  Int_t Wctime, ASIC, PeakTime[16];
  Float_t PeakVal[16], Sample[16][128];
  Float_t PartialRiemannSum[16], RiemannSum[16], RiemannSumSq[16];
  Float_t SampNum[128], ChSample[128];
  for (int i=0; i<128; i++) SampNum[i] = i;

  TFile* file = new TFile(root_file,"READ");
  TTree* tree = (TTree*)file->Get("tree");
  TCanvas* canvas1 = new TCanvas("canvas1", "Test Canvas", 1000, 1000);
  canvas1->Divide(2, 2); // make 4 pads per canvas

  // declare memory for 4 histograms & configure
  TGraph* gr[4];
  TMultiGraph* mg = new TMultiGraph();
  sprintf(xlabel, "Ch_%d Sample No.", chNo);
  mg->GetXaxis()->SetTitle(xlabel);
  mg->GetYaxis()->SetTitleOffset(1.5);
  mg->GetYaxis()->SetTitle("ADC Counts");

  mg->SetMaximum(700);
  for (int i=0; i<4; i++){
  }

  char xlabel[18];
  char m_coord[12];
  char wlabel[20];

  tree->SetBranchAddress("EvtNum", &EvtNum);
  tree->SetBranchAddress("AddNum", &AddNum);
  tree->SetBranchAddress("WrAddNum", &WrAddNum);
  tree->SetBranchAddress("Wctime", &Wctime);
  tree->SetBranchAddress("ASIC", &ASIC);
  tree->SetBranchAddress("PeakTime", PeakTime);
  tree->SetBranchAddress("PeakVal", PeakVal);
  tree->SetBranchAddress("PartialRiemannSum", PartialRiemannSum);
  tree->SetBranchAddress("RiemannSum", RiemannSum);
  tree->SetBranchAddress("RiemannSumSq", RiemannSumSq);
  tree->SetBranchAddress("TimeOverThresh", ToverTh);
  tree->SetBranchAddress("ADC_counts", Sample);

 
  int numEnt = tree->GetEntriesFast();
  if (numEnt >4) numEnt = 4; // limit to 10 page pdf output
  for(int e=0; e<numEnt; e++) {
    tree->GetEntry(e);
    for(int j=0; j<128; j++) { // sample No.
      ChSample[chNo] = Sample[chNo][j];
    }
    int i = e%4;
    gr[i] = new TGraph(128, SampNum, ChSample);
    gr[i]->SetTitle(wlabel);
    gr[i]->SetMarkerStyle(20);
    gr[i]->SetMarkerColor(e%4);     
    mg-Add(gr[i]);
  }
  mg->Draw("ap");


      // Print plots to pdf file
      if (e==3 && numEnt>4) canvas1->Print("waveforms.pdf("); // 1st page

      else if ( (e>3 && e<(numEnt-1) && (e%4)==3) | (numEnt<=4 && e==numEnt-1)) {
        canvas1->Print("waveforms.pdf"); // intermediate pages
      }
      else if (e==(numEnt-1) && numEnt>4) {  // last page
        canvas1->Print("waveforms.pdf)");
      }


  }
  // free up memory declared as "new"
  delete canvas1;
  for (int i=0; i<4; i++){delete h1[i];}
}// note: file closes upon exiting function!
